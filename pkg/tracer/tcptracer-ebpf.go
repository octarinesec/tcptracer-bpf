// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x7c\x7f\x6c\x5b\xd7\x75\xff\x7d\xa4\x68\x51\x72\x5c\x39\xf1\x97\x09\xcd\x7c\xb3\xca\xf9\xb1\x0a\x42\xe0\x48\xb2\x64\x33\xca\x2f\xc5\x5d\x12\x4d\x31\x60\xc5\x31\x17\xd5\x5d\xc0\x30\x34\x6d\xd2\x92\x6d\x5a\xa4\x1d\x3e\xc9\xeb\xb4\x74\xe9\x0c\xa2\x7f\xc8\x49\x06\x68\x99\x31\x88\xb2\x52\x2b\x5d\xb0\xb9\x5b\x3b\xbb\x40\x06\x19\x6e\xb0\xea\x8f\x00\x33\xb2\x60\x13\x02\xa3\xd0\x1f\x41\xa1\xb5\xc3\x20\x74\x86\x27\x74\x46\x38\xf0\x9e\xcf\xe3\x7b\xef\xbc\xfb\x1e\x29\xdb\xed\xfe\x31\xd1\xf4\xfa\x9c\x7b\xcf\x3d\xe7\x9e\x7b\xee\xb9\x9f\x7b\xdf\xb5\xff\xf8\xb9\x5d\xcf\xfb\x34\x4d\x18\x3f\x4d\xfc\xb7\x30\x29\xf3\x57\x78\xc9\xfc\x73\x1f\xfe\xff\x61\xa1\x89\xf9\x7b\x89\xf7\x96\x10\xe2\x2b\x42\x88\xf1\xe6\x95\x72\x85\xd6\x13\x59\xc9\x1f\x8f\xac\x4a\x7a\x7e\x86\xda\x35\xfa\x84\x58\x29\x97\xcb\xf3\x67\x41\xfb\x85\x58\x2d\x97\xcb\x61\xa6\xf4\x42\x83\xd9\xaf\xaf\x42\x83\xff\xe7\x28\xf5\xfb\x06\x99\xde\x7e\xa9\xe7\x02\xfa\x19\x8f\xf4\x39\xf4\xf6\x2b\xf4\xbc\x25\xc7\x2c\x44\x48\x7c\x45\xd6\xe8\xeb\x88\x5f\x8f\x9c\x5f\x08\x71\xb0\x51\x88\x56\x21\xc4\x1b\x28\x63\x8d\x01\x8d\xcb\xf7\x79\xe8\x9d\x6f\x24\x3a\xd4\xf8\x25\x8d\xeb\x18\x68\xed\x06\xd1\x25\x8c\xcb\x87\x71\xb5\x77\x90\x7f\x73\x68\xe7\x7f\x49\xda\x11\xf3\x5f\x97\xfd\xe9\xa3\x41\xc9\x7f\xf5\x9e\x6b\xe4\xc7\x26\xc8\xbd\xb7\x5c\xa6\x72\x09\xe5\x22\xca\x2b\x28\x17\x50\x5e\x42\x79\x11\xe5\x79\x94\x73\x28\xa7\x51\x4e\xa1\x9c\x44\x79\x0a\xe5\x04\xca\x42\xd5\x6e\x9f\xb4\x3b\x4d\xfc\x48\x96\xec\x3f\xb6\x11\xf3\x44\xed\xf4\xd1\x30\xc6\xd7\x46\xed\xda\x27\xc0\x6f\x05\xbf\x15\x7c\xd2\xa3\x67\xdb\x88\xdf\x4c\xfa\xf5\xe3\x1d\x44\xef\x23\xbb\xf4\x7c\x94\xfc\x57\xa0\x68\x1d\x2f\xc2\xfe\x01\xb2\x5f\x2f\xf4\x53\xfd\xe8\x20\xfa\xc7\x78\x8b\xe7\x6d\x7e\x48\x8c\xe6\x65\x7d\xb2\xfd\x2a\xe8\x02\x68\xf2\x63\x66\xf4\xa4\xa4\x87\xdb\xbf\x00\xfd\x2d\xd0\x3f\x47\xfb\x2c\xda\x2f\xa2\x7e\x02\xf5\xcb\xa8\xdf\x2f\xe9\x83\x3e\x8a\x9f\x84\xfe\x9a\xa4\x77\xbf\x4d\xf3\x96\xd0\xd3\x54\xe6\x46\xa8\x9d\x9f\xda\xed\x7e\x07\xf3\xda\x8b\xf9\x6b\xa7\xf9\x4b\x69\x09\xe9\xef\x90\x76\x12\x71\xf4\x36\xc5\xb7\xa6\x49\x7e\x40\xfc\x80\xe2\x02\xf1\x38\x1c\xd9\x23\xe5\x5a\xbe\x43\xf4\x7c\x89\xca\x46\x4d\x88\x3d\xe5\x72\xd9\x98\xbf\xf9\xa4\x19\xb7\x95\xa5\x99\x29\x91\xdc\x70\x84\xc6\x11\x10\x7f\x85\x71\x0e\x95\xa9\xbc\x41\xf5\xed\x7b\x51\x5e\x87\x9d\x69\xd4\xaf\x22\x0e\x68\xde\x8d\xfe\x5b\x36\x39\xed\x18\x82\x1d\x0d\x16\xfd\xfa\xb1\xd6\x9a\x72\x37\x94\x72\x6d\x35\xe5\xf6\x5a\xc6\x6d\xca\x75\xd4\x94\xbb\xae\x94\xa3\x38\x6c\xb9\xd7\xd9\x3e\x8d\xf6\x41\x85\x7f\xf5\x63\x14\xb7\xfa\x59\xf2\x97\x4a\xdf\xaa\x62\x7c\x89\x59\xf8\x7f\x80\xf2\x44\xe2\x2c\xcd\x43\xb2\xb7\x9b\xe2\x6f\xc6\x98\x8f\x28\xd1\xa5\xeb\x98\xc7\x5e\x6a\xff\x3e\xcd\x4b\x72\xdf\x93\xb2\x0c\x35\x0c\xdb\xe2\xee\x0d\x94\x21\x3f\xc5\xe5\x2b\x3e\x21\xca\x65\x21\x42\xbe\x03\x44\x6b\xa0\x35\x8a\x6b\x23\x7f\x8d\x47\xd2\x2c\x3f\x17\x6c\xf9\xc0\x3a\xae\x2c\xc6\xb5\x11\xe3\xda\xc8\xf2\x69\x07\xdb\x3f\xd2\x8a\xfc\x1a\x10\x7b\x64\x19\xd2\xbe\x26\xf3\x63\x48\x7b\x4a\xfa\xa7\xb2\x0e\x02\xb2\x9e\xd6\xbd\x61\x4f\x32\xb2\x17\xf6\x90\xff\x5a\x9e\x77\x8f\x43\xef\xf9\x1a\x72\x9d\xaf\xbd\x8a\xf9\x3a\x28\xe0\x57\x94\x95\x71\xfc\xaa\x5c\x2e\x1b\xe3\x78\x75\x63\x67\xd5\x4e\x4d\xda\x77\x09\xeb\xad\x83\xd9\x4f\xf3\xac\x97\x28\x7f\xaa\xe2\xcd\xba\x1e\xb8\xfd\x89\x12\xe2\x24\x72\x15\xfd\x3f\x6c\xeb\x7f\x38\x42\x71\xd2\xb2\xce\xd9\xef\x75\xcf\x3c\x61\xc4\xd7\x17\xe8\x77\x33\xb3\x1b\x79\xa0\xd4\xea\x6a\xf7\xaa\xa7\xdd\x88\xd7\xc8\x12\xfa\xdf\xc0\xec\x3e\x40\xfd\xfe\x81\xb3\xdf\x03\x9e\x76\x1f\x80\xdd\x3f\x47\xbf\xb4\x01\x27\x4a\x7b\xa1\x6f\xd1\x81\x2f\xea\x89\xcb\x5a\xb8\xe6\xff\x0c\x4f\x85\x39\x9e\x1a\x64\xeb\xb5\xdf\xa1\x77\xd0\x0b\xd7\x20\x4e\x42\xeb\x28\x94\xeb\x91\xab\xac\x53\xfd\x80\x70\xb4\xf7\xc2\x6d\x26\x7e\xfa\x15\x8d\xa3\x8a\x9f\x56\x88\x9e\xe1\xe3\x68\x2d\xdb\xdb\xc5\x08\x3f\x69\xbf\x20\xfc\x74\x0c\xf8\x69\xcb\xb2\xb0\xcb\x01\x2f\x45\xb0\xdf\x46\x80\x97\xb0\x1e\xc7\x23\xc0\x0f\x11\xe0\x87\x08\xf0\x46\x04\x78\x29\x02\xbc\x14\x01\x5e\x8a\x00\x2f\x45\x80\x97\x58\x3e\xac\xe6\x4b\x3f\xf0\x53\xef\x10\xf6\xcf\xd7\x80\x8b\x08\x3f\xe9\x39\xe0\xa6\xde\xac\x6d\x7f\xd5\x73\xb4\x3f\xea\x79\xe0\xa4\x01\xe8\xe9\x05\xde\xca\x75\xa0\x3e\x8a\x7a\xd8\xd5\x0b\x7c\x95\x43\x3e\xcb\xf7\xa3\x1e\xe3\xe8\x05\xbe\xca\x01\x37\xf5\xce\xd9\xc6\x9d\xc8\x03\x2f\x0d\x7c\x02\x1a\x78\x69\x80\xfc\x96\xc9\x03\x2f\x0d\x7c\x06\x1a\x78\x69\xe0\x5f\xd1\x1e\x78\x69\x60\x01\xf5\xc0\x4b\x03\x8b\xa8\x07\x0e\x6a\x00\x5e\x3a\x4e\xfb\xd0\xee\xbd\x98\xa7\x01\xe0\xb6\x3c\xe1\xa8\xc4\x71\xe0\xab\x00\x70\xd3\x73\x68\xb7\xcf\x98\xaf\x28\x4a\xda\x2f\x63\xbe\x0f\x44\x25\x74\xe7\xcf\x21\xfe\x1a\x85\xb8\x58\x2e\x97\x5b\xb6\x23\x2e\x2d\xf9\xa3\xc3\xb2\x4f\x39\xf6\x83\x12\xfa\xbd\x8f\xe2\x49\x2f\x75\x80\x46\x3f\x96\xf8\x6e\x65\xeb\x77\x48\xb9\x9f\xbd\x4b\xe3\x08\x62\xbf\x40\x19\x0b\xbe\xc3\xe2\x14\x7a\x10\xe7\xe3\x91\x15\x94\xcb\xc8\x67\xbf\x46\xb9\x0a\xfe\x12\xf2\x19\xf6\x8f\x63\x34\xaf\x1c\xe7\x54\xec\xda\xe8\x32\xfe\xa0\x6d\x1f\x74\x97\x0f\x33\xf9\xd6\x35\xc8\x5b\xe5\x56\xd6\xa8\x37\xc8\xe4\x97\x95\xf2\xb5\x71\xe1\xaf\x6f\x12\x17\xae\xae\x11\x17\x2e\xd5\x85\x33\x96\x5c\x71\x86\x12\xf7\x7e\x80\xb8\x78\x8f\xf2\x88\xfe\x3d\xc4\xc7\x21\xca\x27\xf3\x09\x92\xdf\x7d\x9a\x4a\xfd\x1c\xe2\x66\x0c\xf9\x64\x0e\xe7\xc7\x22\xe5\x99\xcc\x2c\xe2\x68\xa0\x00\x5c\xb9\x0a\x5c\x39\xc6\x70\xe7\x49\xc2\x91\xda\xd3\x64\xe7\x9f\x40\x4f\x35\xff\x3e\x41\xfc\x67\x89\x36\xf1\x23\xf9\x67\x7e\x0b\xe7\xf7\x48\x7a\x7c\x20\x88\x7c\xb4\x11\x79\x2f\xcc\xf2\x7c\x9f\x6d\x7d\xeb\xa5\x41\xdb\x3a\xb7\xfa\x2b\xaa\xc0\x9b\xb1\x26\xda\xc0\x0c\xbf\x1c\xd4\xb0\xee\x50\x86\x25\x1c\x30\x71\xda\x03\x5b\x68\x23\x8a\x35\x6e\xb6\x8d\xb3\x96\xdc\xab\x5b\x68\x02\xdf\x58\x47\xf5\xc9\x43\x34\x2f\xc6\xfa\x4e\x16\x1f\x86\xfd\x34\xde\xab\x1a\xd9\x37\x1c\x69\x03\x3f\xcc\xf8\xed\xe0\x6f\xc4\xba\x7e\xd4\xb1\x6f\xf3\x7c\xd3\xa1\xcc\x37\x18\xbf\x45\x6e\xa8\x0e\xb9\xb5\xe0\x9b\xa0\xc4\x19\x51\x36\x6f\x94\xe7\xf5\x83\x94\xd7\xf5\x74\xd6\x61\xc7\xa2\x17\x1e\xc0\x7d\x47\xa8\xe9\x01\x92\x47\x3c\xc7\xb4\xfb\xe5\x3e\x3f\x7f\x4c\x3d\x2f\x95\x73\x41\xa3\x6c\x77\xaf\xec\x87\xc7\xd1\x30\xf6\xb7\x7a\xef\x75\x42\xc0\x8b\x3a\xea\x43\xda\x06\xa9\xff\xf6\xf7\x5b\xa4\x7e\x99\x9f\x75\x8d\xf6\xed\xf9\x6f\x13\xad\xca\x13\xe7\x15\x79\x29\x53\x22\x7b\x62\xda\x2f\xca\x3e\x1b\x4e\x3f\x8f\x78\x5a\x81\xdd\x4b\x28\x6f\x94\xad\xe3\x49\x62\x9f\xd1\x4f\x87\xeb\xd6\x6f\xcb\x53\xa7\x5b\x6b\xca\xad\x28\xe5\xda\x6a\xca\x2d\xa9\xf2\xf0\xe9\x8e\x9a\x72\x37\x94\x72\xc8\xdf\x61\x67\xfb\x3e\x6b\xfe\xfe\xb6\x39\x7f\x24\x67\xe4\xef\x3e\xd7\xfc\xbd\xac\x3c\xd7\xc3\xff\x03\x53\xc8\xaf\x2b\xc8\xaf\x67\x90\x7f\x31\x1f\xed\x84\xd3\x32\x38\xcf\x0d\x47\x66\xa8\xfd\xfb\x34\x2f\xc9\x7d\xb3\x94\x8f\x1b\x7e\x2c\x4b\xe7\xb9\xfe\x1f\x24\xdf\x3c\xd7\xff\x90\xe8\x6a\xfe\xfd\x3b\x92\x73\xdc\x7b\xd2\xfa\x09\x88\x2e\xc1\xe3\x79\xca\x33\x9e\x09\x3f\x5e\x00\x8e\x1f\x1f\x03\x9e\x1e\x03\x3e\x1b\x3b\xef\xc8\xd7\x46\xdc\x48\x3c\xe1\xb7\xfb\xf7\x2d\x69\x43\x25\xaf\x90\x7f\xf5\xb3\x51\xe5\x38\xc7\x7b\xcd\xfb\x62\x4d\xc6\x2d\xed\x0f\x89\xd2\x0f\x11\xc7\x7b\x41\x4f\x81\x4e\x83\x3e\x03\x7a\x04\x7e\x9e\x66\xf9\x17\xfb\x63\x69\x86\xf1\x47\x21\x3f\x0b\xf9\x3c\x95\x63\x05\x94\x27\x91\xb7\x8d\xf3\x04\x70\x7e\xc9\xc0\xa9\xb4\x6f\xcf\xcf\xc2\x0f\x0d\x14\x67\xc6\xfe\x14\xf6\xd9\xfd\x7b\x21\x40\xf7\xf4\x15\x7f\x6c\xae\x73\x3e\xfc\xd2\x77\x27\x48\xef\x2d\xe7\x8f\xc3\xe5\x66\xe5\x7e\x3c\x75\x73\xb8\xf4\xf4\xa0\xd2\x1e\x15\x2e\xed\x53\xe1\x3b\x0f\x79\x8e\x4b\xa7\xd6\x20\x5f\x13\x97\x7a\xe8\xad\x0b\x97\xd6\x91\xd7\x94\xb8\xb4\x8e\xbc\xa6\xc4\xa5\x1e\x79\x6d\xa9\xae\xbc\xb6\x46\x5c\x5a\xea\xb3\x9d\x1f\xf5\xf7\x11\x1f\x38\x9f\xed\x0e\x09\xf4\x8b\x78\xe9\xa5\xf5\xa1\xcf\x02\x8f\x1a\xe7\xc4\x19\xc4\x4f\x3b\xce\x99\xb8\x17\x1a\x8e\x7c\x4a\xeb\x6e\x1a\x78\xb4\x99\xce\x9d\xa1\xc0\x66\xea\xbf\x9b\xfa\x0f\x35\xdc\xc7\xf2\x5e\x88\xe5\xbd\x4d\x2e\x79\x6f\x9d\xcc\x7b\xd6\xf5\x75\xde\x73\x7d\x35\x3b\xf6\x7b\xb7\xf6\x94\x1f\x1b\x58\x7e\xc4\x79\x7b\x0c\xe7\xf1\xb1\x29\x47\x7e\x9c\xfa\x8d\xe6\xc7\x33\xb6\xfc\xa8\x63\xbd\xeb\x33\xc8\x53\xed\xf6\xfb\x0b\x23\x9f\xe9\x33\xb8\x2f\x69\xb7\xdf\x77\x64\x4a\x57\x58\x9e\x3c\x05\xfe\xa7\x8c\x5f\x84\xfe\xcf\xa0\xff\xbb\xc8\x9b\x93\x28\xdf\x85\xbe\x39\x96\x3f\xa7\x6f\x3a\x7f\x0e\x59\xf2\x67\x40\xfc\x84\xe4\x81\x5f\x39\x5e\x35\xef\xcd\x3a\xaa\xb4\x5c\x27\x41\xc4\x6f\x66\x8d\x38\xb6\x7a\xaf\xf5\x28\xc9\x03\xb7\xc6\xb4\x76\x19\x47\xe3\x87\x08\xff\xcf\xe3\xbb\xcd\x05\xe8\x19\x2f\x92\x9f\x93\x45\xf2\x93\x71\xce\x9c\xc7\xf7\x22\xd5\xba\x5c\x50\x9e\x87\x8d\xf5\xbc\xe0\xba\x9e\x3f\x53\xac\xe7\xf1\x22\xc5\xd3\x70\x71\xda\x11\xe7\xd1\x35\xe1\xda\x16\xc2\xeb\x69\xf8\xef\x7b\x6d\xec\x9c\x00\x3d\x91\x5b\xd5\xf3\xb2\x37\x7e\xf6\xf0\xdb\xb4\x72\xff\x83\x3d\xcc\xee\x98\xb6\xcc\xf0\xf4\x64\x0d\x3c\x1d\xb5\xe3\x69\xe3\x3b\x99\x87\x3d\x93\x5e\xdf\xc9\x3c\xe4\x94\x78\xda\xb8\x0f\xf1\x90\x53\xe2\x69\xe3\x3e\xc4\x43\x4e\x89\xa7\x8d\xfb\x90\xcd\xce\xf6\x51\xeb\xbe\xf3\x8e\x39\x9f\xf6\x38\x8d\xae\x11\x4f\xc3\xff\xb8\xd7\x34\xf1\xf4\x2c\xc3\xd3\x73\x0c\x4f\x7f\x9f\xe1\xe9\x0f\x81\xa7\x69\xc1\x3a\xf1\x34\x1d\x88\xcd\x7d\x85\xe2\xcf\xd8\x57\x62\xda\x65\xb2\xd7\x12\xbf\x95\xb8\x0a\x88\x1f\xdd\x96\x38\x8c\x69\xb3\x0c\x87\x19\xf7\x9d\x93\x37\x87\xc3\x8c\x7b\x36\x66\x8f\x0a\x87\x45\xbd\xee\xe9\x14\xf2\x1c\x87\x4d\xae\x41\xbe\xee\xfb\x41\x85\xde\x35\xdd\x0f\x7a\xe8\xf5\xbc\x1f\xf4\x90\xf3\xbc\x1f\x54\xac\x87\xa5\xba\xd6\xc3\x1a\x71\xd8\x2c\xe2\xc2\x78\x1f\x71\xd6\xf8\x1e\x30\x87\xfd\x1b\x71\xd2\x8e\xfd\xbe\x04\xfc\x85\xef\x1e\x99\x69\xc4\x4d\x33\xed\xf7\x19\x7c\x47\x1e\xde\x77\x99\xd6\xcb\x39\xe0\xaf\xb1\x8f\x29\x3f\xee\x20\x7b\x76\xbf\x40\x65\xa8\xf1\x9b\x64\x27\xee\xc7\x77\x7f\xcd\xe0\x0f\xc9\xf2\x15\xdc\x9a\x85\x04\x7d\xc8\x7b\x25\x00\x3a\x40\x17\xff\xb1\x86\x80\x2c\xf9\xfa\x0b\xcb\xe5\x67\xb9\xa7\xfb\x3a\xdd\x6b\xc5\x7c\xe3\xd4\xbe\xe6\xfd\xdc\x89\xaa\x7f\x03\x96\xfb\x2a\x7e\x0f\x3f\x5e\xec\xab\xee\x4f\x7e\xb9\x5e\xfa\xe1\x27\xc2\x03\x46\xff\xc9\xc8\x2e\xb6\x8f\xe1\xbb\x8e\x81\xaf\x66\x28\x9f\x24\xf1\x9d\x27\x31\xf3\x11\xe8\xfd\xc8\x4b\xe4\xdf\xab\xb8\xaf\x1c\xc6\xf7\x9e\xcc\xcc\x65\xc6\x3f\x04\xf9\x8f\x21\x3f\x82\x75\x9c\x45\x99\x77\xe0\xc6\x41\xc5\x3d\x68\xa6\x74\x08\xfd\xe3\xfc\x7b\x96\xec\x48\xcc\xbe\x86\xbc\x47\x80\x68\x9e\xae\x65\xab\xdf\x59\xde\x40\x19\x0a\xdc\x43\xf5\x8f\x08\x36\x6f\x2d\xc4\x0f\x71\xfe\x5d\xc4\xb7\xe0\xb4\xa8\x07\x4e\x33\xce\x21\xfc\xbc\x5b\xcb\xee\x24\xbe\x77\x25\x7b\xdf\x65\x7e\x9b\x62\xb8\xf3\x3d\xe0\x4e\xc3\x7f\x67\x1c\x78\x63\xd2\x13\xef\x5f\xfb\x92\xb7\x9f\xf6\x6c\xff\x9f\x5f\xfe\x76\xe3\x6d\x9a\xc5\xdb\x2c\x8b\xb7\x39\x97\x78\xfb\xbe\x4b\xbc\x7d\x78\x4b\xf1\x76\xab\xf3\x1e\x10\xff\xf4\x5b\xf5\x9f\x3e\x63\xe4\x4b\x9c\x3b\x7a\xf1\xce\xcd\xf8\x4e\x3b\x83\x7c\x79\x16\xe7\x23\x7c\x7f\x35\xce\x49\xce\xf5\x3c\xe1\xb2\x9e\xdf\x64\xeb\xf9\x4f\xe1\xd7\x53\x28\xbf\xfb\x1b\xf3\xef\x90\xf4\xe5\xbf\x50\xff\x8e\xf3\x0f\xde\x6f\x64\xd4\xef\x31\xf9\x39\x28\xd4\x44\xdf\x65\xad\xeb\x41\xf5\x5e\xc1\x79\x0e\xfa\x86\x2c\xcd\x73\xd0\x2b\x74\x0e\x32\xe6\x11\xfd\x0f\x17\xf1\xde\xa4\x78\x0d\x78\xa5\xf6\xfe\x7b\x6d\x0d\xfb\x76\x23\xbe\xc7\xd7\x7a\xf7\x35\x5e\x04\x3e\x2c\xe2\xfd\x46\x1d\xe7\x30\x35\xee\x30\xf6\xf3\x65\xd7\xfd\x5c\x85\xdf\xc7\x8b\x93\xf0\xc3\x60\xdd\xf9\x4a\xc3\x7b\x03\xe9\x6f\x41\xf9\xd9\x38\x27\x19\xfc\x98\x76\x17\xbd\xd3\xa8\x03\x97\x0e\x2a\xfc\x52\xe9\x47\x93\xf9\x19\xef\x32\x50\xff\xc0\x16\xcd\xa6\x27\xf3\x3e\xcd\x5f\x66\x96\xe6\xf3\x15\xc8\x39\xbe\x37\xf9\x84\x68\x46\xff\xeb\x6e\x61\xdc\xb5\xbf\xd7\xa0\xdf\xc8\xad\xf6\x3b\x70\xd3\xe7\x4d\xe9\xcf\x20\xbe\xab\x39\xf0\xfe\x20\xf0\xfe\xbf\x97\x7d\xb6\xfc\x87\xf7\xb1\xb8\x67\xe3\x78\x87\xdf\xcb\x26\x71\x6e\x37\xcf\xa9\xde\xef\x5b\x12\xc0\x85\xc9\x76\xe4\x25\xbc\x8b\x49\x46\x3e\x81\xde\x7e\x96\x4f\x67\xb1\x1e\x6a\x9f\x67\x2f\x7a\x9c\x67\x55\xb8\xf8\x23\xeb\x3b\x31\x86\x8b\xcd\x77\x68\xc0\xa7\xa5\x6b\x6c\x9f\xbf\xec\xc8\x9f\x73\x8a\xfc\x99\xc0\x7d\x7c\x48\xfb\x29\x70\xc1\x47\x4a\xbf\x86\xb4\x9f\x40\x0f\xe9\x33\xef\x11\x0d\xfd\x97\x19\xff\x1f\x49\xbf\x25\x3f\x4f\x7a\xe4\x67\xe3\xfb\x51\x40\xfc\xd9\x6d\x8e\x9f\x0f\xcb\xcd\xb7\x35\x7e\x6e\xee\xdd\x94\x19\x57\x57\x11\x4f\xc6\x39\x94\xde\x11\xea\x73\x88\xab\xea\x77\x72\x23\xae\x6a\x9f\x0f\xd5\xf7\x5d\xf5\x9f\x0f\xaf\xac\x51\x9e\x9f\x8b\x2f\x7a\xc8\x1b\x71\xdd\xd8\xe4\x3c\x0f\x5f\xf2\x38\xf7\x99\xf1\xbd\xe8\x12\xdf\x9f\xd7\x15\xdf\xe6\x7d\x2d\xcd\x4b\xcc\x87\x77\x00\x18\x4f\xed\xf3\x55\x13\xe2\x93\xe6\x5b\x9f\xa5\xf9\x8e\x35\xd0\x01\xc1\xed\x9c\x40\xd9\xc0\x72\xee\x0a\x3c\x56\x1d\x1f\xc5\x21\xf0\xd6\x39\xc4\xdb\xd8\x50\x35\xce\x7c\x32\x2e\x80\xeb\x8b\xfb\x19\x5e\xb3\xdf\x47\x9b\xf8\xa9\x00\x1a\xf7\xc9\xed\x27\x81\xbb\xc8\x7f\x26\x0e\xfb\x1c\xf4\x9b\x2c\x2e\x6b\xe3\xaf\xb4\x32\x7f\x14\x90\x3f\x9e\x41\xfe\x38\xe9\x92\x3f\x9e\xc0\x3c\x4e\xb0\x3c\x61\xbc\xdb\x7e\x93\xf1\x7b\x1c\xf9\x63\xd0\x0b\xdf\xe1\xef\x8f\x38\xf1\x33\xbd\x17\xd9\x8d\x77\x37\x21\x8d\xde\x93\xec\xfe\x3a\x68\x7f\x1b\xf4\x2f\x32\xfd\x8f\x80\xff\x39\xe3\x3f\x78\x53\x79\xcd\xc4\x9d\xff\x61\xc3\x9d\x26\xbe\x24\xdc\x69\xbc\x9b\x4e\x36\x03\xef\x55\xdf\xc9\x2e\x3b\xf6\xe9\x6b\x9e\xfb\x74\xb3\xa4\x13\xd5\x7d\x9a\x00\x25\xc7\xa9\xd6\xf7\x2f\xcb\xb7\xe5\x7d\xaf\xf3\x3d\x6f\x7d\x78\xf8\x61\xa5\x7d\x6e\xe7\x4a\x8e\xc3\xcd\x75\x45\xeb\xdc\x79\x3e\xba\x54\x5d\x47\x0d\x96\x7d\xdd\x5c\x57\xf6\x7b\x43\xe3\x9e\x90\xbf\x93\x35\xdf\x95\xe3\x3d\x28\xf0\xbb\x71\xef\xad\xca\xab\x6e\xe7\x95\x8b\x37\x71\x1e\xe4\xfe\x6f\xb0\xfc\x27\x1a\xc4\x9d\x1f\x7e\x77\xfc\xa2\xfe\x69\x58\x37\x72\xd9\xdc\xf1\x4b\xf5\x77\xc7\x2f\xea\x9f\x86\xbc\x25\xf1\xcc\x1d\xbf\x54\x7f\x15\xbf\xb4\xdd\xf1\x8b\xe3\x67\xac\xa3\x3b\x79\xd7\xfe\xd3\xee\xec\x47\xca\x9f\x11\x2f\xa7\xf0\xe7\x3b\x3f\xfa\x3d\x52\x68\x95\xff\x6b\x16\x2f\x0c\xee\x12\x42\x7c\x89\xbf\x43\xb9\x11\xf5\xda\xd8\x1e\x11\x3c\xb9\x5e\xbb\xdf\x9a\x9f\x85\x10\x05\x94\x15\xde\xa3\xf8\xf3\x62\xd0\xe4\xf5\x29\xda\xe1\xaf\x1a\x89\xb4\xa5\x1d\x9e\x7b\x88\x4b\xcd\x26\xef\xa4\x61\xdc\x06\x93\x37\x69\xf4\x67\x69\x07\x88\x2b\x16\x2c\x3a\x2e\xe2\xcf\x13\x35\x26\xf9\x75\xb9\x36\x02\xa2\x6d\x9d\x9d\x7f\xd5\x4f\xfc\x60\xa3\x9d\x9f\x01\xff\x12\xe3\xef\x04\xbf\xcf\x6f\xe7\xff\xb3\x8f\xf8\x69\xd6\xfe\x07\xe0\xb7\x06\xed\xfc\x22\xf8\xfd\xcc\x9e\x3d\xb0\xb3\xc0\xda\x3f\x08\xfe\x29\xc6\xff\x2f\xd8\x33\xc5\xec\xf9\x0b\xf4\x7f\x91\xb5\x3f\x04\xfe\x02\xe3\x27\xa4\x7c\x93\xe8\x67\xf6\xff\xd4\x47\xfc\x09\xc6\xff\x00\xfc\x30\xeb\xe7\x4d\xf0\xfb\x19\x7f\xb4\x81\xf8\x43\x8c\xff\x36\xda\xcf\x31\xfb\x3f\x93\xf4\x7a\xb1\xcc\xf8\xbd\xe0\x17\x02\x76\x7e\xc9\x47\xfc\x21\x16\x07\x63\xe0\xcf\xb1\xf6\x2f\xa1\x9f\x45\x66\x4f\x3b\xf8\xc1\x26\x3b\xff\x47\xe0\xcf\xd9\xd9\xe2\x7e\xf0\x79\x92\xb9\x04\xbd\x69\xc6\xdf\x27\xfd\xb0\x41\x0c\xb1\x5c\xdd\x05\x7e\xb8\xd9\xce\xf7\x83\x9f\x66\xfc\x6f\xf8\x89\xbf\xc8\xfa\xef\x02\x3f\xcb\xfa\x1f\x40\x3f\x51\xd6\xcf\x27\x68\xbf\xc0\xe6\xf7\x41\xf0\x57\x79\xfc\xa3\x9f\x05\xe6\x9f\x7b\xc0\x9f\x5b\x6f\xe7\xff\x12\xfd\x4c\x31\xfe\x47\x2e\xf6\xff\x8d\x61\x3f\xe3\x0f\x80\xcf\xd7\xf9\xff\x03\x7f\x99\xf1\xdb\xa5\x3d\x2d\xa2\x9f\xc5\xcf\xff\xf8\x89\x3f\xc4\xf8\xa3\x3e\xe2\x4f\xb1\x38\x89\xa0\x9f\x36\x16\x27\x1f\xa3\x9f\x2c\xe3\xbf\x8e\x7e\xae\x30\xff\x1c\x42\x3f\x8b\x8c\xdf\x0b\xfe\x32\xe3\xff\x18\xfd\xa4\xd9\xf9\xfd\x9b\xe0\xaf\x30\xfe\x17\xd2\x9e\xbb\xab\xf9\xd0\xf8\xad\x97\xfd\x6f\x72\xf8\x93\xf2\xf5\xef\x08\xd5\xcf\x2f\xfc\x2e\xfc\x80\x0b\xbf\xd1\x85\xdf\xe4\xc2\x5f\xef\xc2\xdf\xe0\xc2\x6f\x71\xe1\xdf\xed\xc2\xdf\xe4\xc2\x77\x8e\xb7\x5b\xde\xa3\x7c\xd5\xc1\xff\x23\x79\x1f\xdc\xea\xe0\x17\xe5\x3d\xf5\x7d\x0e\xfe\x8a\xec\x27\xec\xe0\x1f\x91\xfd\xfc\x7f\x07\x3f\x2d\xf7\xaf\xfb\x1d\xfc\x33\xb2\xbd\x73\x5c\x1b\x64\xff\x4e\xff\xfc\x4c\xb6\x77\xfa\x73\x55\xf6\xef\x9c\xc7\x49\xc9\x77\xce\xd7\x77\x64\x3f\x4e\xbf\x35\xca\xf6\x4e\xff\xff\x4c\xf2\x9d\xf1\x70\x42\xf2\x9d\xf3\x7e\x42\xfa\x2d\xe4\xe0\xd3\x77\xfb\x7b\x1d\xfc\x17\xa5\x3d\x0f\x38\xf8\xd3\xb2\x9f\xcd\x0e\xfe\x3a\xc9\x8f\x38\xf8\xfd\x28\x2b\xe1\xff\x7b\x42\x88\x28\xa3\xb3\x8c\x3e\x6f\xa1\x5f\xae\x8c\x65\x9d\x49\x57\xf0\xcc\x5c\xd0\x5e\x6f\xed\xff\x39\xd6\xff\x73\xac\xff\x0a\x3d\xcd\xfa\x9f\xf4\xdb\x69\x11\xb4\xeb\x8b\x5a\xe8\x18\xd3\x57\x69\x7f\x85\xd1\x6d\x9a\x9d\x5e\xf5\xdb\xfb\x1b\x0a\x98\xf4\x4b\x15\x7c\x1c\xb0\xd7\x2f\x33\x7d\xe1\x26\x3b\x3d\xd5\x6c\xd2\x7b\x84\xc0\xbf\x0e\x62\xea\xeb\x63\xfa\xe7\x18\x3d\xd1\x64\xd7\x1f\x6e\xb6\xeb\xef\x6f\xb6\xeb\x2b\xac\xb7\xb7\x5f\xbc\xcb\xae\x7f\x88\xe9\x5f\xe0\xfa\x7c\x26\xfd\x6c\x75\x5f\x36\xeb\xc3\xcc\xff\x05\xe6\x9f\x8b\xcc\xde\x41\x36\x7e\xeb\x7c\x3c\x5f\xf1\x8f\x85\x7e\x01\x67\x79\x2b\xfd\x1a\xa3\xfb\x35\x7b\xff\x46\xa6\x68\x46\x2c\x75\x58\xe8\xc7\x11\xa3\x06\xdd\x6b\x19\x7f\x85\x7e\x42\x08\x31\x62\xa1\x9f\xac\x8c\xdf\x42\x3f\x25\x04\xfe\x76\x3c\xd1\x4f\x57\xe6\xc7\x42\x3f\x53\xd9\x97\x2d\xb4\xdc\x23\xb6\xe6\x53\x85\xbc\x18\x1e\x4d\xe5\xb3\xa3\x47\x5f\x4f\xc5\xe3\x99\x23\xa9\x7c\x3c\x99\x1b\x8e\x27\x92\xc9\x54\x36\x2f\xb6\x8e\xa6\x46\xaa\xd5\x8f\xf1\x5a\x77\xc1\xad\xf1\x78\x3c\x7e\xe0\x70\x5e\x1c\x4e\x64\x73\x8f\x1d\xd8\x9f\x39\x92\xcb\x27\x46\x46\xe2\xa3\x29\x9b\x54\x3e\x99\x8d\x9f\xd8\x1e\x4f\x1e\x3d\x72\x24\x95\xcc\x8b\x61\x35\xdb\x6e\x84\xaa\x52\x59\xc3\xf5\x74\xab\xf5\x74\x7b\xe9\xe9\x76\xd5\x63\xd6\xc8\x21\xe6\x93\xd9\xfc\x68\x22\x99\x1a\x8d\xe7\xf2\x89\xfc\xf1\x1c\x71\x73\xf9\xd1\xcc\x91\x83\x39\xee\x85\x6c\x66\x7f\x4e\xc4\x4f\xa4\x46\x73\x99\xa3\x47\xac\x76\x1e\xd8\x1f\x47\x9b\xaa\x8d\x16\x96\xdd\x3e\x5e\xe1\xe0\x5a\x47\x99\x4b\xe5\xa5\x61\x29\x3e\x0e\xb3\xc2\xda\x3c\x39\x72\x34\xe7\x68\x4a\xcc\xf8\x48\x26\x99\x3a\x82\xda\xad\xa9\x74\xfc\xc0\x68\xe2\x70\x4a\x6c\xcd\xe5\x47\xf3\x89\xd7\xc5\xd6\x9c\x7e\xb8\x52\xee\xda\xb9\x73\x7b\xfc\x71\x2a\xba\x64\xd9\x89\x72\x7b\xbc\x53\x96\xdd\x28\xb7\xa1\xec\xac\xd2\x51\x34\x8f\xa2\x59\x14\xcd\xc0\xa7\x72\x7b\x7c\x07\x55\xef\x40\xed\x0e\xd4\xee\xa8\x4e\x48\x3c\x75\x22\x75\x24\x1f\xcf\x64\x4f\x6c\x27\x1e\x66\x2c\x77\x34\x39\x6c\xe1\xe6\x8f\x67\x47\x52\xd9\xcc\x7e\x62\xed\xda\xb9\xb3\x27\xbe\x9d\xba\x06\xd5\x05\xb2\x0b\x74\x27\x68\x2a\x3b\x51\xf6\xc4\x7b\xd0\xac\x07\xcd\x7a\x60\x59\x0f\x9a\xf5\x28\x2c\xeb\x56\x5a\xd6\xed\xb4\xac\x9b\x3a\xed\x26\x1d\xa0\xb6\x75\xc3\xc3\xa0\xbb\x50\xdd\xd9\x0d\x95\xb2\xdc\x11\xdf\x86\xe6\xdb\xe0\xd9\x6d\x98\x08\xf0\xa9\x8c\xc6\xbb\xd0\xac\x0b\xbd\x76\xa1\x39\xe8\x4e\xd4\x77\x82\xde\xd6\x89\xf6\x28\xbb\x3a\xd1\x1e\x74\x27\x68\x2a\xb7\xc7\xb7\x75\x90\x43\xba\x8c\xbc\x77\xab\xbf\x17\x7d\x42\x89\x66\x57\x77\x51\x39\xc6\xce\x49\xfc\x1a\x41\xc3\x7f\xec\x98\x5e\xbd\xef\xe0\x3f\x7e\x05\xd7\xa1\x79\xcb\x17\x18\x9f\x1d\x27\xc4\xa3\x9a\x50\xa2\xe8\x8b\xbf\x4f\xa5\x71\x6f\xf3\x10\xbe\x5f\x1a\xf2\x06\x7f\x93\x8b\x7e\xe3\x9c\xc0\xcf\xbf\x5c\x7f\x8b\x8b\xfe\x05\xe8\x1f\xb4\xe8\x0f\x28\xf4\x2f\xb8\xf8\x6f\x12\x9d\xd6\x1a\xff\xc7\x42\xad\x3f\x3c\x60\xd7\xf3\x10\xb0\x2a\xd7\xff\xd7\x2e\xfa\x83\xd8\xc7\xd3\x35\xc6\x7f\xce\x45\x7f\x1b\xf4\xbf\x66\xd1\xdf\xa4\xd0\xbf\xea\xe2\xff\x2c\x3d\xf7\xae\xde\x83\xb9\xe9\xbf\xe6\xe2\xff\x53\xd0\x3f\x69\xd1\xbf\x5e\xa1\xff\x21\x9f\x5a\x7f\x87\x01\xad\x37\x78\xeb\xff\xaa\xcf\xc5\xff\x2f\x52\x39\x61\xd1\xbf\x41\xa1\xff\x77\x5d\xfc\xdf\xd1\x4e\x65\xa1\xc6\xf8\x1f\x74\xf1\xff\x94\x42\x7f\x8b\x42\xff\x27\x2e\xfe\x9f\xc3\xdf\x67\x5d\x10\xde\xfa\x17\x5c\xfc\x1f\x46\xfe\x68\xb5\xe8\xbf\x5b\xa1\xff\xef\xdd\xe6\x1f\xef\x7b\xf8\x7d\x06\xd7\xff\xb7\x2e\xfa\xa3\xd0\xdf\x61\xd1\xbf\x49\xa1\xff\x18\xde\x83\xf2\x1c\xb8\x82\x7f\xa7\x89\xbf\x83\xe0\xf9\xeb\xdf\x7c\x6a\xf9\x60\xb4\x3e\xf9\xb7\x5c\xf4\xb7\x3e\x5e\x9f\xfc\x2f\x5d\xf4\x47\x7b\xeb\x93\xff\x4b\x17\xfd\x83\x4f\xd4\x27\xaf\xb9\xc8\xa7\x9f\xac\x4f\x3e\x29\xd4\xf2\x13\x4f\xd5\x27\x9f\xd1\xd4\xf2\x53\x4f\xd7\x27\xff\xbc\x8b\xfc\xf9\x67\xea\x93\xff\x43\x17\xf9\x05\x6c\x60\x6c\xf9\x3a\xf6\xcf\x1e\x97\xf9\xfb\xb4\x4f\xad\x8f\xcb\x7f\xcb\x45\xff\xa2\x8b\x3c\xa7\x9f\x85\x7e\x76\x5d\x26\x96\x20\x5f\x6b\xfd\x3f\xe5\x92\xff\xd2\x58\x7f\xd6\xfc\xbb\x45\xb1\xfe\x5e\xf6\x39\x75\x57\x7e\x73\xf8\x77\x9c\x36\x5a\xce\xdb\x3b\x2d\xf2\xc6\x4d\xd2\xff\x06\x00\x00\xff\xff\x82\x27\xf6\x37\x78\x5a\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 23160, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

